{
	"info": {
		"_postman_id": "917115d0-e003-47b3-90d7-9ffd9e80916e",
		"name": "AppNest Equipment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38822923"
	},
	"item": [
		{
			"name": "Log in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"  var jsonData = pm.response.json();",
							"  pm.environment.set(\"admin_token\", jsonData.token);",
							"  console.log(\"Token guardado con éxito\");",
							"} else {",
							"  console.error(\"Error al obtener token:\", pm.response.status);",
							"}",
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user_id).to.exist;",
							"    pm.expect(responseData.name).to.exist;",
							"    pm.expect(responseData.email).to.exist;",
							"    pm.expect(responseData.roles).to.exist;",
							"    pm.expect(responseData.token).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid email format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
							"});",
							"",
							"",
							"pm.test(\"Roles array should not be empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.roles).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Token is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should be a non-empty string\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"daron@gmail.com\",\n  \"password\": \"daron123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create equipment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Guarda el ID del equipo en una variable de entorno",
							"const jsonData = pm.response.json();",
							"pm.environment.set(\"equipment_id\", jsonData.id);",
							"",
							"// También puedes guardar el nombre si lo deseas",
							"pm.environment.set(\"equipment_name\", jsonData.name);",
							"",
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('model');",
							"    pm.expect(responseData).to.have.property('description');",
							"    pm.expect(responseData).to.have.property('category');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('createdAt');",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Model should not be null or undefined\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.model).to.exist.and.to.not.be.null.and.not.be.undefined;",
							"});",
							"",
							"",
							"pm.test(\"CreatedAt is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"HP EliteBook X2\",\n  \"model\": \"840 G7\",\n  \"description\": \"Laptop ejecutiva\",\n  \"category\": \"laptop\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/equipment",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"equipment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all equipment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item).to.have.property('id');",
							"        pm.expect(item).to.have.property('name');",
							"        pm.expect(item).to.have.property('model');",
							"        pm.expect(item).to.have.property('description');",
							"        pm.expect(item).to.have.property('category');",
							"        pm.expect(item).to.have.property('status');",
							"        pm.expect(item).to.have.property('createdAt');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.id).to.be.a('string').and.to.have.lengthOf.at.least(1);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Model is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.model).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Model should be a non-empty string\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"CreatedAt field is in valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/equipment",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"equipment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get one equipment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('model');",
							"    pm.expect(responseData).to.have.property('description');",
							"    pm.expect(responseData).to.have.property('category');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('createdAt');",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Model is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.model).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Model should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"CreatedAt is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt should be in valid date format\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/equipment/{{equipment_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"equipment",
						"{{equipment_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit an equipment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('id');",
							"  pm.expect(responseData).to.have.property('name');",
							"  pm.expect(responseData).to.have.property('model');",
							"  pm.expect(responseData).to.have.property('description');",
							"  pm.expect(responseData).to.have.property('category');",
							"  pm.expect(responseData).to.have.property('status');",
							"  pm.expect(responseData).to.have.property('createdAt');",
							"});",
							"",
							"",
							"pm.test(\"Id is a valid UUID format\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.id).to.match(/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/);",
							"});",
							"",
							"",
							"pm.test(\"Model is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.model).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Model should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Category is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.category).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Lenovo ThinkPad Editado\",\n  \"model\": \"X395\",\n  \"description\": \"Modificado\",\n  \"category\": \"laptop\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/equipment/{{equipment_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"equipment",
						"{{equipment_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, name, model, description, category, status, and createdAt\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item).to.have.property('id');",
							"        pm.expect(item).to.have.property('name');",
							"        pm.expect(item).to.have.property('model');",
							"        pm.expect(item).to.have.property('description');",
							"        pm.expect(item).to.have.property('category');",
							"        pm.expect(item).to.have.property('status');",
							"        pm.expect(item).to.have.property('createdAt');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.id).to.be.a('string').and.to.have.lengthOf.at.least(1);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Model is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.model).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Model should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Description is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item).to.have.property('description').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/equipment/search?name=thinkpad&category=laptop",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"equipment",
						"search"
					],
					"query": [
						{
							"key": "name",
							"value": "thinkpad"
						},
						{
							"key": "category",
							"value": "laptop"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit quipment status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Response has the required fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.include.all.keys('id', 'name', 'model', 'description', 'category', 'status', 'createdAt');",
							"})",
							"",
							"pm.test('Id is a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Id should not be empty');",
							"})",
							"",
							"pm.test('Category is a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.category).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Category should not be empty');",
							"})",
							"",
							"pm.test('Status is one of the expected values', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist.and.to.be.oneOf([",
							"        'available',",
							"        'rental',",
							"        'maintenance'",
							"    ]);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"status\": \"available\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/equipment/status/{{equipment_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"equipment",
						"status",
						"{{equipment_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove equipment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - message and equipmentId\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"    pm.expect(responseData.equipmentId).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"EquipmentId is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.equipmentId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"EquipmentId should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/equipment/{{equipment_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"equipment",
						"{{equipment_id}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "equipmentId",
			"value": "",
			"type": "default"
		}
	]
}