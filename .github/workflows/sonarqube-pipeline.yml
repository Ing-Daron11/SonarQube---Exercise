name: SonarQube Pipeline with Trivy Security

on:
  push:
    branches: ['**']  # Se ejecuta en cada push a cualquier rama
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Trivy Security Scan
  trivy-security-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner for JSON output
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-results.json'

      - name: Upload Trivy results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-security-results
          path: |
            trivy-results.sarif
            trivy-results.json

  # Job 2: Tests and Coverage
  tests-and-coverage:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: equiprent_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: equiprent_db
      JWT_SECRET: test_jwt_secret
      JWT_EXPIRES_IN: 2h
      PORT: 3000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run unit tests with coverage
        run: yarn test --coverage --coverageReporters=lcov --coverageReporters=text

      - name: Run e2e tests users
        run: yarn test:e2e -- test/users/users.e2e-spec.ts

      - name: Run e2e tests equipment
        run: yarn test:e2e -- test/equipment/equipment.e2e-spec.ts

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  # Job 3: SonarQube Analysis
  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [tests-and-coverage]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Run tests for SonarQube
        run: yarn test --coverage --coverageReporters=lcov

      - name: Install SonarQube Scanner
        run: npm install -g sonar-scanner

      - name: Run SonarQube Scanner
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=AppNest-backend \
            -Dsonar.sources=src \
            -Dsonar.tests=test \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.coverage.exclusions="**/*.spec.ts,**/*.e2e-spec.ts,**/node_modules/**,**/dist/**"

  # Job 4: Security Report Consolidation
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [trivy-security-scan, sonarqube-analysis]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Trivy results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: trivy-security-results

      - name: Generate Security Summary
        run: |
          echo "# 🛡️ Security Analysis Report" >> security-report.md
          echo "" >> security-report.md
          echo "## Trivy Vulnerability Scan" >> security-report.md
          echo "- Scan completed at: $(date)" >> security-report.md
          echo "- Results uploaded to GitHub Security tab" >> security-report.md
          echo "" >> security-report.md
          
          if [ -f "trivy-results.json" ]; then
            echo "### Vulnerability Summary" >> security-report.md
            cat trivy-results.json | jq '.Results[]?.Vulnerabilities[]?.Severity' | sort | uniq -c >> security-report.md || echo "No vulnerabilities found" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "## SonarQube Analysis" >> security-report.md
          echo "- Code quality analysis completed" >> security-report.md
          echo "- Results available at: ${{ secrets.SONAR_HOST_URL }}" >> security-report.md

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

  # Job 5: Deployment Success Notification
  deployment-notification:
    name: Pipeline Complete
    runs-on: ubuntu-latest
    needs: [trivy-security-scan, tests-and-coverage, sonarqube-analysis]
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
      - name: Pipeline Success Notification
        run: |
          echo "All pipeline stages completed successfully!"
          echo "SonarQube Analysis: http://4.246.200.64:9000"
          echo "Security Report: Available in artifacts"
          echo "Coverage Report: Available in artifacts"